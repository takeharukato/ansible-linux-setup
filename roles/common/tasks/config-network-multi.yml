#  -*- coding:utf-8 mode:yaml -*-
#  Ansible playbook
#  Copyright 2020 Takeharu KATO All Rights Reserved.
#
# 複数インターフェース設定タスク。
#

# ネットワークインターフェース定義を設定
- name: Normalize multi NIC items
  ansible.builtin.set_fact:
    _netif_items: "{{ _netif_list_effective }}"

# いまの管理経路IF, SSHが乗っている可能性のあるIFを特定
- name: Compute current mgmt iface (for safety)
  ansible.builtin.set_fact:
    _current_mgmt_iface: "{{ ansible_facts.default_ipv4.interface | default('') }}"

## いま SSH 到達先へのルートが乗っている IF（＝実際の制御経路）を特定
- name: Detect SSH route device (dev) to controller
  ansible.builtin.shell: |
    set -o pipefail
    ip -4 route get {{ ansible_host | default(inventory_hostname) }} \
      | awk '{ for (i=1;i<=NF;i++) if ($i=="dev") {print $(i+1); exit} }'
  args:
    executable: /bin/bash
  register: _ssh_route_dev
  changed_when: false
  failed_when: false

- name: Normalize ssh route device fact
  ansible.builtin.set_fact:
    _ssh_route_iface: "{{ (_ssh_route_dev.stdout | trim) | default('', true) }}"

## いまアクティブな NM 接続が割り当てられているデバイス一覧
- name: Get active NM devices
  ansible.builtin.command: nmcli -t -f DEVICE connection show --active
  register: _nm_active_devs_cmd
  changed_when: false
  failed_when: false

# 現在アクティブな NM 接続が割り当てられているデバイス一覧を配列化
- name: Build active device set
  ansible.builtin.set_fact:
    _nm_active_devices: "{{ (_nm_active_devs_cmd.stdout | default('') ).split('\n')
                            | map('trim') | reject('equalto','') | unique | list }}"

# .link の出力ディレクトリを必ず作成します。
- name: Ensure .link output directory exists
  ansible.builtin.file:
    path: "{{ netif_nm_link_dir }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

# MAC アドレス指定が無いエントリは既存の .link を削除
- name: Clean up existing systemd link files
  ansible.builtin.file:
    path: "{{ netif_nm_link_dir }}/10-{{ item.netif }}.link"
    state: absent
  loop: "{{ _netif_items }}"
  when:
    - _netif_items | length > 0
    - item.netif | default('', true) | length > 0
    - item.mac | default('', true) | length == 0

# .link を配置( netif 非空かつ mac ありのときだけ )
- name: Deploy systemd link files
  ansible.builtin.template:
    src: 10-netif.link.j2
    dest: "{{ netif_nm_link_dir }}/10-{{ item.netif }}.link"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ _netif_items }}"
  when:
    - _netif_items | length > 0
    - item.netif | default('', true) | length > 0
    - item.mac | default('', true) | length > 0

- name: Branch to settings by distribution
  block:
    - name: Setup RHEL Interfaces
      when: ansible_facts.os_family == "RedHat"
      block:

        # NetworkManager 用ディレクトリを作成
        - name: Ensure NetworkManager system-connections directory exists.
          ansible.builtin.file:
            path: "/etc/NetworkManager/system-connections"
            state: directory
            owner: root
            group: root
            mode: "0755"

        # 各インターフェース用の nmconnection ファイルを配置
        - name: Deploy NM keyfiles on RHEL
          ansible.builtin.template:
            src: rhel9-multi-netif.nmconnection.j2
            dest: "/etc/NetworkManager/system-connections/{{ item.netif }}.nmconnection"
            owner: root
            group: root
            mode: "0600"
          when:
            - item.netif | default('', true) | length > 0
          loop: "{{ _netif_items }}"
          register: deploy_nm_connection_files
          loop_control:
            label: "{{ item.netif }}"

        # 文法検証のために nmcli connection load を実行
        - name: NM keyfile syntax check per interface
          ansible.builtin.command: "nmcli connection load /etc/NetworkManager/system-connections/{{ item.netif }}.nmconnection"
          when:
            - (deploy_nm_connection_files is defined and deploy_nm_connection_files is changed)
            - item.netif | default('', true) | length > 0
            - item.netif != (_current_mgmt_iface | default(''))
            - item.netif != (_ssh_route_iface | default(''))
            - item.netif not in (_nm_active_devices | default([]))
          loop: "{{ _netif_items }}"
          register: nm_load
          changed_when: false
          failed_when: >
            (nm_load is defined) and
            ((nm_load.results | default([]) | selectattr('rc','defined') | selectattr('rc','ne',0) | list | length) > 0)
          loop_control:
            label: "{{ item.netif }}"

        # SELinux コンテキストを復元
        - name: Restore SELinux context on nmconnection file
          ansible.builtin.command: "restorecon -v /etc/NetworkManager/system-connections/{{ item.netif }}.nmconnection"
          when:
            - (deploy_nm_connection_files is defined and deploy_nm_connection_files is changed)
            - item.netif | default('', true) | length > 0
            - item.netif != (_current_mgmt_iface | default(''))
            - item.netif != (_ssh_route_iface | default(''))
            - item.netif not in (_nm_active_devices | default([]))
          loop: "{{ _netif_items }}"
          register: nm_selinux_restorecon
          changed_when: false
          failed_when: >
            (nm_selinux_restorecon is defined) and
            ((nm_selinux_restorecon.results | default([]) | selectattr('rc','defined') | selectattr('rc','ne',0) | list | length) > 0)
          loop_control:
            label: "{{ item.netif }}"

        # テンプレートで変更があった場合にのみハンドラをキューする。
        # 文法検証に成功した事が前提。
        - name: Queue NM apply handler when template changed
          ansible.builtin.debug:
            msg: "Queue handler to reload and activate NM connections"
          changed_when: true
          notify:
            - "nm_reload_and_activate"
          when: (deploy_nm_connection_files is defined and deploy_nm_connection_files is changed)

    # Debian系のインターフェース定義を設定
    - name: Setup Debian Interfaces
      when: ansible_facts.os_family == "Debian"
      block:

        # Debian 系で使用する有効 NIC 名を算出 ( mgmt_nic → common_default_nic → ansible_facts の順 )
        - name: Compute effective mgmt NIC on Debian
          ansible.builtin.set_fact:
            _effective_mgmt_nic: "{{ (mgmt_nic | default('', true)) if (mgmt_nic | default('', true) | length) > 0
                                    else ((common_default_nic | default('', true)) if (common_default_nic | default('', true) | length) > 0
                                    else (ansible_facts.default_ipv4.interface | default('', true))) }}"

        # 反復元が空、または netif が空のとき、DHCP / SLAAC の 1 エントリを生成
        - name: Ensure at least one Debian netplan item
          ansible.builtin.set_fact:
            _netif_items:
              - netif: "{{ _effective_mgmt_nic }}"
                mac: ""
                static_ipv4_addr: ""
                network_ipv4_prefix_len: 0
                gateway4: "{{ gateway4 | default('', true) }}"
                static_ipv6_addr: ""
                network_ipv6_prefix_len: 0
                gateway6: "{{ gateway6 | default('', true) }}"
                ignore_auto_ipv4_dns: "{{ _mgmt_ignore_auto_ipv4_dns | bool }}"
                ignore_auto_ipv6_dns: "{{ _mgmt_ignore_auto_ipv6_dns | bool }}"
                name_server_ipv4_1: "{{ ipv4_name_server1 | default('', true) }}"
                name_server_ipv4_2: "{{ ipv4_name_server2 | default('', true) }}"
                name_server_ipv6_1: "{{ ipv6_name_server1 | default('', true) }}"
                name_server_ipv6_2: "{{ ipv6_name_server2 | default('', true) }}"
                dns-search: ""
          when:
            - (_netif_items | default([], true) | length) == 0 or
              (_netif_items | default([{'netif':''}], true))[0].netif | default('', true) | length == 0

        # netplan用ディレクトリを作成
        - name: Ensure netplan directory exists.
          ansible.builtin.file:
            path: "/etc/netplan"
            state: directory
            owner: root
            group: root
            mode: "0755"

        # netplan設定ファイルを配置
        - name: Deploy netplan file
          ansible.builtin.template:
            src: 99-netcfg-multi.yaml.j2
            dest: "/etc/netplan/99-netcfg.yaml"
            owner: root
            group: root
            mode: "0600"

        # 文法チェックのためのnetplan generate実行
        - name: netplan generate (syntax check)
          command: netplan generate
          register: netplan_generate
          changed_when: netplan_generate.rc == 0
          failed_when: netplan_generate.rc != 0
          notify:
            - "netplan_apply"


#
# 過去にNetworkManagerで設定された不要な接続を削除
# ー 安全版：/etc の 802-3-ethernet に限定 / アクティブ接続は除外 / UUID 指定で削除
#

# 既存接続の取得（Debian/Ubuntu/RHEL 共通）
- name: List existing NM connections
  ansible.builtin.command: >
    nmcli -t -f NAME,UUID,TYPE,DEVICE,AUTOCONNECT,FILENAME
    connection show
  register: nmconns_raw
  changed_when: false

# nmcli 出力をシェルで YAML 配列に整形 ( Jinja フィルタ依存を避けるため )
- name: Convert nmcli output to YAML rows
  ansible.builtin.shell: |
    set -eu
    nmcli -t -f NAME,UUID,TYPE,DEVICE,AUTOCONNECT,FILENAME connection show |
    awk -F':' 'BEGIN{ print "---"; print "_rows:" }
               NF{
                 # 値中のダブルクォートをエスケープ
                 gsub(/"/, "\\\"", $1); gsub(/"/, "\\\"", $2); gsub(/"/, "\\\"", $3);
                 gsub(/"/, "\\\"", $4); gsub(/"/, "\\\"", $5); gsub(/"/, "\\\"", $6);
                 printf "- NAME: \"%s\"\n  UUID: \"%s\"\n  TYPE: \"%s\"\n  DEVICE: \"%s\"\n  AUTOCONNECT: \"%s\"\n  FILENAME: \"%s\"\n", $1,$2,$3,$4,$5,$6
               }'
  args:
    executable: /bin/bash
  register: nmcli_yaml
  changed_when: false

# YAML 解析して _nm_rows 変数に格納
- name: Parse YAML into _nm_rows
  ansible.builtin.set_fact:
    _nm_rows: "{{ (nmcli_yaml.stdout | from_yaml)._rows | default([]) }}"
  changed_when: false

# いまアクティブな接続の NAME/DEVICE を取得（誤削除防止に利用）
- name: Get active NM connections (NAME,DEVICE)
  ansible.builtin.command: nmcli -t -f NAME,DEVICE connection show --active
  register: _nm_active_pairs_cmd
  changed_when: false
  failed_when: false

- name: Build active connection name set and pair list
  ansible.builtin.set_fact:
    _nm_active_names: "{{ ((_nm_active_pairs_cmd.stdout | default('')).split('\n') | map('trim') | reject('equalto','') | map('regex_replace','^(.*?):(.*)$','\\1') | unique | list) }}"
    _nm_active_pairs: "{{ ((_nm_active_pairs_cmd.stdout | default('')).split('\n') | map('trim') | reject('equalto','') | map('regex_replace','^(.*?):(.*)$','{\"NAME\":\"\\1\",\"DEVICE\":\"\\2\"}') | map('from_json') | list) }}"

# 許可する接続名（今回作成した接続ID = netif）
- name: Build allowed connection NAME list (we created)
  ansible.builtin.set_fact:
    _allowed_conn_names: "{{ (_netif_items | default([], true) | map(attribute='netif') | select('string') | reject('equalto','') | list) }}"

# 今回デプロイした keyfile パスのホワイトリスト
- name: Build allowed keyfile path list
  ansible.builtin.set_fact:
    _allowed_keyfiles: "{{ (_netif_items | default([]) | map(attribute='netif') | select('string') | reject('equalto','') | map('regex_replace','^(.*)$','/etc/NetworkManager/system-connections/\\1.nmconnection') | list) }}"

# /etc 配下にある接続に限定（実体 keyfile を持つもの）
- name: Build candidate rows under /etc
  ansible.builtin.set_fact:
    _etc_rows: "{{ (_nm_rows | default([]) | selectattr('FILENAME','defined') | selectattr('FILENAME','search','^/etc/NetworkManager/system-connections/') | list) }}"

# IEEE 802.3 (有線 Ethernet) のみ対象
- name: Filter ethernet connections under /etc
  ansible.builtin.set_fact:
    _etc_eth_rows: "{{ (_etc_rows | default([]) | selectattr('TYPE','equalto','802-3-ethernet') | list) }}"

# 削除候補を安全に抽出
#  - NAME が今回作成した接続名に含まれない
#  - アクティブ接続名ではない
#  - DEVICE が現在の管理IF, SSH経路IF, アクティブデバイスに一致しない
- name: Build safe obsolete connection rows
  ansible.builtin.set_fact:
    _obsolete_rows_safe: "{{ (_etc_eth_rows | default([]) | rejectattr('NAME','in', _allowed_conn_names | default([])) | rejectattr('NAME','in', _nm_active_names | default([])) | rejectattr('DEVICE','equalto', _current_mgmt_iface | default('')) | rejectattr('DEVICE','equalto', _ssh_route_iface | default('')) | rejectattr('DEVICE','in', _nm_active_devices | default([])) | rejectattr('NAME','equalto','') | rejectattr('UUID','equalto','') | list) }}"

- name: Build identifiers of obsolete connections
  ansible.builtin.set_fact:
    _obsolete_conn_names: "{{ _obsolete_rows_safe | map(attribute='NAME') | list }}"
    _obsolete_conn_uuids: "{{ _obsolete_rows_safe | map(attribute='UUID') | list }}"
    _obsolete_keyfiles: "{{ _obsolete_rows_safe | map(attribute='FILENAME') | list }}"

# 念のため：今回デプロイした /etc の keyfile は除外
- name: Exclude allowed keyfiles from obsolete keyfiles
  ansible.builtin.set_fact:
    _obsolete_keyfiles: "{{ (_obsolete_keyfiles | default([])) | difference(_allowed_keyfiles | default([])) }}"

# 接続オブジェクトの削除（UUID 指定）※アクティブ除外済み集合のみ
- name: Delete obsolete ethernet connections (UUID, non-active only)
  ansible.builtin.command: "nmcli connection delete uuid {{ item }}"
  loop: "{{ _obsolete_conn_uuids | default([]) }}"
  when:
    - (_obsolete_conn_uuids | default([]) | length) > 0
    - item is not match('^$')

# 実在する keyfile のみ削除（/etc 配下のみ）
- name: Stat obsolete keyfiles (existence check)
  ansible.builtin.stat:
    path: "{{ item }}"
  loop: "{{ _obsolete_keyfiles | default([]) | unique | reject('equalto','') | list }}"
  register: _obsolete_keyfiles_stats
  changed_when: false

# 存在する keyfile のみ抽出
- name: Filter existing obsolete keyfiles
  ansible.builtin.set_fact:
    _obsolete_keyfiles_existing: "{{ (_obsolete_keyfiles_stats.results | default([]) | selectattr('stat.exists','defined') | selectattr('stat.exists') | map(attribute='stat.path') | list) }}"

# ファイルを削除
- name: Remove obsolete keyfiles on disk (under /etc)
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ _obsolete_keyfiles_existing | default([]) }}"
  when: (_obsolete_keyfiles_existing | default([]) | length) > 0
  notify:
    - "nm_reload_and_activate"

#
# NetworkManagerの設定を更新したらリブート
#
# 固定ネットワークインターフェース名を使用するための
# systemd の .link ファイルを適用するためにリブートが必要
#
# .link の適用順序
#  事前に .link を配置し, 名称固定が反映された後に NetworkManager の
#  keyfile が読み込まれるため, 固定ネットワークインターフェース名設定の
#  確実性を重視するし, 強制リブートする。
#

# マシンをリブートする
- name: Reboot host gracefully
  reboot:
    reboot_timeout: 600
    msg: "Reboot triggered by role: common"
    pre_reboot_delay: 2

# リブート後の接続待機
- name: Wait for connection after reboot
  wait_for_connection:
    timeout: 300
