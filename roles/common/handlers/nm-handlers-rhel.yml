#  -*- coding:utf-8 mode:yaml -*-
#  Ansible playbook
#  Copyright 2020 Takeharu KATO All Rights Reserved.
#
# RHEL 系で, 接続定義を再読み込みし, 未アクティブの接続のみ起動します。
# notify の nm_reload_and_activate に対応するハンドラ
# 注意: 複数NICインターフェース処理で, _netif_items を事前定義していることを
# 前提としたハンドラです。

# 接続定義を再読み込みします。
- name: Reload NM connections
  listen: "nm_reload_and_activate"
  when:
    - ansible_facts.os_family == "RedHat"
    - (_netif_items | default([], true) | length) > 0
  ansible.builtin.command: nmcli connection reload
  changed_when: false

# 現在アクティブな接続の name と device を取得します。
- name: Get active NM connections (name and device)
  listen: "nm_reload_and_activate"
  when:
    - ansible_facts.os_family == "RedHat"
    - (_netif_items | default([], true) | length) > 0
  ansible.builtin.command: nmcli -t -f NAME,DEVICE connection show --active
  register: nm_active
  changed_when: false
  failed_when: nm_active.rc != 0

# 既知のデバイス一覧を取得します（存在しないデバイス操作を回避）
- name: Get known NM devices
  listen: "nm_reload_and_activate"
  when:
    - ansible_facts.os_family == "RedHat"
    - (_netif_items | default([], true) | length) > 0
  ansible.builtin.command: nmcli -t -f DEVICE device status
  register: nm_devices
  changed_when: false
  failed_when: nm_devices.rc != 0

# 取得結果から, アクティブな name/device と 既知デバイス集合 を作成します。
- name: Build active/known sets
  listen: "nm_reload_and_activate"
  when:
    - ansible_facts.os_family == "RedHat"
    - (_netif_items | default([], true) | length) > 0
  ansible.builtin.set_fact:
    _nm_active_names: "{{ (nm_active.stdout_lines | default([])) | map('regex_replace', '^([^:]+):.*$', '\\1') | list }}"
    _nm_active_devices: "{{ (nm_active.stdout_lines | default([])) | map('regex_replace', '^[^:]*:(.*)$', '\\1') | list }}"
    _nm_known_devices: "{{ (nm_devices.stdout_lines | default([])) | reject('equalto','') | list }}"
  changed_when: false

# 各 item.netif がカーネルに存在するかを /sys/class/net で確認
- name: Probe kernel netdev existence via sysfs
  listen: "nm_reload_and_activate"
  ansible.builtin.stat:
    path: "/sys/class/net/{{ item.netif }}"
  loop: "{{ _netif_items | default([], true) }}"
  when:
    - ansible_facts.os_family == "RedHat"
    - (_netif_items | default([], true) | length) > 0
    - item.netif | default('', true) | length > 0
  register: sysfs_dev
  changed_when: false
  failed_when: false
  loop_control:
    label: "{{ item.netif }}"

# { "<ifname>": true|false } のマップを作成
- name: Build device-exists map from sysfs
  listen: "nm_reload_and_activate"
  when:
    - ansible_facts.os_family == "RedHat"
    - sysfs_dev is defined
  ansible.builtin.set_fact:
    _dev_exists_map: "{{ (_dev_exists_map | default({})) | combine({ item.item.netif: (item.stat.exists | default(false)) }, recursive=true) }}"
  loop: "{{ sysfs_dev.results | default([]) }}"
  changed_when: false

# 起動対象デバイスを managed にします（存在デバイスかつ未アクティブのみ）。
- name: Ensure device is managed by NM
  listen: "nm_reload_and_activate"
  when:
    - ansible_facts.os_family == "RedHat"
    - (_netif_items | default([], true) | length) > 0
    - item.netif | default('', true) | length > 0
    - (_dev_exists_map | default({})).get(item.netif, false)
    - item.netif in (_nm_known_devices | default([]))
    - item.netif not in (_nm_active_names | default([]))
    - item.netif not in (_nm_active_devices | default([]))
  ansible.builtin.command: "nmcli device set {{ item.netif }} managed yes"
  loop: "{{ _netif_items | default([], true) }}"
  changed_when: false
  loop_control:
    label: "{{ item.netif }}"

# IPv4 の残留有無を確認します（inet があれば rc=0）。
- name: Check stale IPv4 addresses
  listen: "nm_reload_and_activate"
  when:
    - ansible_facts.os_family == "RedHat"
    - (_netif_items | default([], true) | length) > 0
    - item.netif | default('', true) | length > 0
    - (_dev_exists_map | default({})).get(item.netif, false)
    - item.netif in (_nm_known_devices | default([]))
    - item.netif not in (_nm_active_names | default([]))
    - item.netif not in (_nm_active_devices | default([]))
  ansible.builtin.shell: |
    set -o pipefail
    ip -4 addr show dev {{ item.netif }} scope global | grep -q 'inet '
  register: v4_present
  changed_when: false
  failed_when: false
  loop: "{{ _netif_items | default([], true) }}"
  loop_control:
    label: "{{ item.netif }}"

# 検査結果を { netif: true|false } の辞書に整形します。
- name: Build IPv4 presence map
  listen: "nm_reload_and_activate"
  when:
    - ansible_facts.os_family == "RedHat"
    - v4_present is defined
  ansible.builtin.set_fact:
    v4_present_map: "{{ (v4_present_map | default({})) | combine({ (item.item.netif | default('')): ((item.rc | int) == 0) }, recursive=True) }}"
  loop: "{{ (v4_present.results | default([])) | selectattr('rc','defined') | list }}"
  changed_when: false

# 残留がある場合のみフラッシュします。
- name: Flush IPv4 when present
  listen: "nm_reload_and_activate"
  when:
    - ansible_facts.os_family == "RedHat"
    - (_netif_items | default([], true) | length) > 0
    - item.netif | default('', true) | length > 0
    - (_dev_exists_map | default({})).get(item.netif, false)
    - item.netif in (_nm_known_devices | default([]))
    - item.netif not in (_nm_active_names | default([]))
    - item.netif not in (_nm_active_devices | default([]))
  ansible.builtin.command: "ip -4 addr flush dev {{ item.netif }}"
  loop: "{{ _netif_items | default([], true) }}"
  changed_when: true
  failed_when: false
  loop_control:
    label: "{{ item.netif }}"

# IPv6 の残留有無を確認します（inet6 があれば rc=0）。
- name: Check stale IPv6 addresses
  listen: "nm_reload_and_activate"
  when:
    - ansible_facts.os_family == "RedHat"
    - (_netif_items | default([], true) | length) > 0
    - item.netif | default('', true) | length > 0
    - (_dev_exists_map | default({})).get(item.netif, false)
    - item.netif in (_nm_known_devices | default([]))
    - item.netif not in (_nm_active_names | default([]))
    - item.netif not in (_nm_active_devices | default([]))
  ansible.builtin.shell: |
    set -o pipefail
    ip -6 addr show dev {{ item.netif }} scope global | grep -q 'inet6 '
  register: v6_present
  changed_when: false
  failed_when: false
  loop: "{{ _netif_items | default([], true) }}"
  loop_control:
    label: "{{ item.netif }}"

# IPv6 残留マップ
- name: Build IPv6 presence map
  listen: "nm_reload_and_activate"
  when:
    - ansible_facts.os_family == "RedHat"
    - v6_present is defined
  ansible.builtin.set_fact:
    v6_present_map: "{{ (v6_present_map | default({})) | combine({ (item.item.netif | default('')): ((item.rc | int) == 0) }, recursive=True) }}"
  loop: "{{ (v6_present.results | default([])) | selectattr('rc','defined') | list }}"
  changed_when: false

# 残留がある場合のみフラッシュします。
- name: Flush IPv6 when present
  listen: "nm_reload_and_activate"
  when:
    - ansible_facts.os_family == "RedHat"
    - (_netif_items | default([], true) | length) > 0
    - item.netif | default('', true) | length > 0
    - (_dev_exists_map | default({})).get(item.netif, false)
    - item.netif in (_nm_known_devices | default([]))
    - item.netif not in (_nm_active_names | default([]))
    - item.netif not in (_nm_active_devices | default([]))
  ansible.builtin.command: "ip -6 addr flush dev {{ item.netif }}"
  loop: "{{ _netif_items | default([], true) }}"
  changed_when: true
  failed_when: false
  loop_control:
    label: "{{ item.netif }}"

# 必要に応じてデバイス切断で状態を初期化します (失敗は無視します)。
- name: Reset device state by disconnect
  listen: "nm_reload_and_activate"
  when:
    - ansible_facts.os_family == "RedHat"
    - (_netif_items | default([], true) | length) > 0
    - item.netif | default('', true) | length > 0
    - (_dev_exists_map | default({})).get(item.netif, false)
    - item.netif in (_nm_known_devices | default([]))
    - item.netif not in (_nm_active_names | default([]))
    - item.netif not in (_nm_active_devices | default([]))
  ansible.builtin.command: "nmcli device disconnect {{ item.netif }}"
  loop: "{{ _netif_items | default([], true) }}"
  changed_when: false
  failed_when: false
  loop_control:
    label: "{{ item.netif }}"

# 未アクティブなものだけ起動します（存在デバイスのみ）。
- name: Activate NM connection when inactive
  listen: "nm_reload_and_activate"
  when:
    - ansible_facts.os_family == "RedHat"
    - (_netif_items | default([], true) | length) > 0
    - item.netif | default('', true) | length > 0
    - (_dev_exists_map | default({})).get(item.netif, false)
    - item.netif in (_nm_known_devices | default([]))
    - item.netif not in (_nm_active_names | default([]))
    - item.netif not in (_nm_active_devices | default([]))
  ansible.builtin.command: "nmcli connection up {{ item.netif }}"
  loop: "{{ _netif_items | default([], true) }}"
  register: nm_up_result
  retries: 1
  delay: 2
  changed_when: nm_up_result.rc == 0
  failed_when: nm_up_result.rc != 0
  loop_control:
    label: "{{ item.netif }}"
