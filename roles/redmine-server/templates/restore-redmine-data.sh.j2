#!/usr/bin/env bash
#  -*- coding:utf-8 mode:bash -*-
# This file is generated by ansible.
{# 日付の取得 #}
# last update: {{ '%Y-%m-%d %H:%M:%S %Z' | strftime(ansible_date_time.epoch) }}

#
# Redmine用リストアスクリプト
# 以下のファイルを配置してから`restore-redmine-data.sh`を実行する
# 以下のファイル名に合わせる必要がある
# /data/redmine/backup/redmine.dump.gz (gzip圧縮済みデータベースの論理バックアップ)
# /data/redmine/backup/redmine_files.tar.gz (tar.gz形式のRedmineの添付ファイルバックアップ)
#

# alpineの最新版を使用して一時的なコンテナを起動
TEMPORARY_IMAGE="alpine:latest"

# バックアップ置き場
if [ -d "{{redmine_docker_dir|default('/data/redmine/docker', true)}}" ]; then

    pushd "{{redmine_docker_dir|default('/data/redmine/docker', true)}}"

    if [ -d "{{redmine_backup_dir|default('/data/redmine/backup', true)}}" -a -f "{{redmine_backup_dir|default('/data/redmine/backup', true)}}/{{redmine_files_backup_name|default('redmine_files.tar.gz', true)}}" ]; then

        # Redmine の files を復元
        # 一時コンテナ ( Alpine Linux イメージ ) を起動し, 終了時に自動削除(`--rm`)。
        # Docker ボリューム `{{redmine_files_volume|default('redmine_vol_files', true)}}` をコンテナ内 `/to` に,
        # バックアップディレクトリ `{{redmine_backup_dir|default('/data/redmine/backup', true)}}` を `/from` に,
        # 読み書きマウント(`-v`)。
        # コンテナ内で `/to`(=リストア先のボリュームマウント)へ移動し, `tar xzf` で,
        # `/from/{{redmine_files_backup_name|default('redmine_files.tar.gz', true)}}` (バックアップアーカイブ)を展開。
        # (`x` (展開), `z` (gzip 解凍), `f`(ファイル指定) )。
        docker run --rm -v "{{redmine_files_volume|default('redmine_vol_files', true)}}:/to" -v "{{redmine_backup_dir|default('/data/redmine/backup', true)}}:/from" "${TEMPORARY_IMAGE}" \
            sh -c 'cd /to && tar xzf /from/{{redmine_files_backup_name|default('redmine_files.tar.gz', true)}}'

    fi

    if [ -d "{{redmine_backup_dir|default('/data/redmine/backup', true)}}" -a -f "{{redmine_backup_dir|default('/data/redmine/backup', true)}}/{{redmine_dbdata_backup_gzip|default('redmine.dump.gz', true)}}" ]; then

        # 圧縮ファイルを展開
        sudo gunzip "{{redmine_backup_dir|default('/data/redmine/backup', true)}}/{{redmine_dbdata_backup_gzip|default('redmine.dump.gz', true)}}"
    fi

    if [ -d "{{redmine_backup_dir|default('/data/redmine/backup', true)}}" -a -f "{{redmine_backup_dir|default('/data/redmine/backup', true)}}/{{redmine_dbdata_backup_name|default('redmine.dump', true)}}" ]; then

        # RedmineのDBを復元
        # `docker compose exec -T {{redmine_db_service|default('redmine-db', true)}}` で, 対話型端末を割り当てずに (`-T`),
        # {{redmine_db_service|default('redmine-db', true)}} サービスのコンテナ内でコマンドを実行。
        # `pg_restore` コマンドを実行し, 標準入力からDBのバックアップを読み込み(`-`),
        # `{{redmine_db_user|default('redmine_user', true)}}` ユーザで, `{{redmine_db_name|default('redmine', true)}}` データベースへ復元。
        # `pg_restore` コマンドの`--clean --if-exists` オプションで, 既存のオブジェクトを削除して復元するよう指示する。
        sudo cat "{{redmine_backup_dir|default('/data/redmine/backup', true)}}/{{redmine_dbdata_backup_name|default('redmine.dump', true)}}"|docker compose exec -T "{{redmine_db_service|default('redmine-db', true)}}" \
            pg_restore -U "{{redmine_db_user|default('redmine_user', true)}}" -d "{{redmine_db_name|default('redmine', true)}}" --clean --if-exists

        # 再度圧縮
        sudo gzip -9 "{{redmine_backup_dir|default('/data/redmine/backup', true)}}/{{redmine_dbdata_backup_name|default('redmine.dump', true)}}"
    fi

    popd

fi
