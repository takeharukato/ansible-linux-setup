#!/usr/bin/env python3
#  -*- coding:utf-8 mode:python -*-
# This file is generated by ansible.
{# 日付の取得 #}
# last update: {{ '%Y-%m-%d %H:%M:%S %Z' | strftime(ansible_date_time.epoch) }}

#
# 各 rank の 振幅スペクトル と パワースペクトル密度図をPNG出力。
# 合算 ( 全 rank 連結）も作成。
#
# mumpy, matplotlibを以下の手順で導入しておくこと
# python3 -m pip install --user numpy matplotlib
# 実行手順
# rank*.val があるディレクトリで ( 量子=50usの例, dt=0.00005 )
# python3 40_fft_plot.py runs/fwq-YYYYmmdd-HHMMSS --dt 0.00005

import argparse
import glob
import os
import numpy as np
import matplotlib.pyplot as plt

def load_series(path):
    arr = []
    with open(path, 'r') as f:
        for line in f:
            line=line.strip()
            if not line: continue
            try:
                arr.append(float(line))
            except ValueError:
                pass
    return np.asarray(arr, dtype=float)

def plot_fft(x, dt, title, out_png):
    if x.size < 8:
        fig = plt.figure()
        plt.title(title + " (too few samples)")
        plt.text(0.5, 0.5, "N < 8", ha='center', va='center')
        fig.savefig(out_png, bbox_inches='tight')
        plt.close(fig)
        return

    # detrend: mean remove
    x = x - np.mean(x)
    n = x.size
    # rFFT
    X = np.fft.rfft(x)
    freq = np.fft.rfftfreq(n, d=dt)
    amp = np.abs(X) / n * 2.0  # single-sided amplitude
    psd = (np.abs(X)**2) / (n / (2.0/dt))  # 粗いPSD(単位系は用途に応じ調整)

    # amplitude spectrum
    fig1 = plt.figure()
    plt.title(title + " - Amplitude Spectrum")
    plt.xlabel("Frequency [Hz]")
    plt.ylabel("Amplitude")
    plt.plot(freq, amp)
    plt.grid(True)
    fig1.savefig(out_png.replace(".png", "_amp.png"), bbox_inches='tight')
    plt.close(fig1)

    # power spectrum (rough)
    fig2 = plt.figure()
    plt.title(title + " - Power Spectrum")
    plt.xlabel("Frequency [Hz]")
    plt.ylabel("Power")
    plt.plot(freq, psd)
    plt.grid(True)
    fig2.savefig(out_png.replace(".png", "_pow.png"), bbox_inches='tight')
    plt.close(fig2)

def main():
    ap = argparse.ArgumentParser(description="FFT Plotter for Netgauge rank*.val")
    ap.add_argument("run_dir", help="directory containing rank*.val")
    ap.add_argument("--dt", type=float, default=1.0, help="sampling interval [s] (default: 1.0)")
    ap.add_argument("--glob", default="rank*.val", help="glob pattern (default: rank*.val)")
    ap.add_argument("--out", default="fft_plots", help="output subdir (default: fft_plots)")
    args = ap.parse_args()

    os.makedirs(os.path.join(args.run_dir, args.out), exist_ok=True)

    files = sorted(glob.glob(os.path.join(args.run_dir, args.glob)))
    if not files:
        raise SystemExit("no rank*.val found in {}".format(args.run_dir))

    # per-rank
    allvals = []
    for f in files:
        x = load_series(f)
        if x.size:
            allvals.append(x)
        base = os.path.splitext(os.path.basename(f))[0]
        out_png = os.path.join(args.run_dir, args.out, base + ".png")
        plot_fft(x, args.dt, base, out_png)

    # concatenated-all
    if allvals:
        xcat = np.concatenate(allvals, axis=0)
        out_png = os.path.join(args.run_dir, args.out, "all_ranks.png")
        plot_fft(xcat, args.dt, "ALL_RANKS", out_png)

if __name__ == "__main__":
    main()
