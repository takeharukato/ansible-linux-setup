#!/usr/bin/env bash
#
#  -*- coding:utf-8 mode:bash -*-
# This file is generated by ansible.
{# 日付の取得 #}
# last update: {{ '%Y-%m-%d %H:%M:%S %Z' | strftime(ansible_date_time.epoch) }}

#
# CPU情報取得
#

set -euo pipefail

SCRIPT_DIR=$(cd $(dirname $0); pwd)

# HK = 0-1, APP = 2-
HK_RANGE="${HK_RANGE:-0-1}"

# 物理/論理CPUの存在範囲を確認 ( 例: "0-15" )
PRESENT="$(cat /sys/devices/system/cpu/present)"

# presentからHKを引いたAPPリストを作る ( 例: 2-15 )
range_minus() {
    # 引数: 全体レンジ, 除外レンジ  => 出力: 残レンジ ( カンマ/ハイフン混在可 )
  python3 - "$1" "$2" << 'PY'
import sys
def expand(r):
    s=set()
    for p in r.split(','):
        if '-' in p:
            a,b=map(int,p.split('-'))
            s.update(range(a,b+1))
        elif p.strip():
            s.add(int(p))
    return sorted(s)
allr=expand(sys.argv[1])
ex= set(expand(sys.argv[2]))
rest=[str(x) for x in allr if x not in ex]
# 再圧縮 ( 連番を a-b で )
out=[]
if rest:
    start=prev=rest[0]
    for v in rest[1:]:
        if int(v)==int(prev)+1:
            prev=v
        else:
            out.append(f"{start}-{prev}" if start!=prev else f"{start}")
            start=prev=v
    out.append(f"{start}-{prev}" if start!=prev else f"{start}")
print(','.join(out))
PY
}

APP_RANGE="$(range_minus "${PRESENT}" "${HK_RANGE}")"
if [[ -z "${APP_RANGE}" ]]; then
  echo "ERROR: APP_RANGE is empty. Check HK_RANGE=${HK_RANGE} and cpu present=${PRESENT}" >&2
  exit 1
fi

# コア数 ( 要素数 ) を数える
range_count() {
  python3 - "$1" << 'PY'
import sys
def expand(r):
    s=set()
    for p in r.split(','):
        if '-' in p:
            a,b=map(int,p.split('-'))
            s.update(range(a,b+1))
        elif p.strip():
            s.add(int(p))
    print(len(s))
expand(sys.argv[1])
PY
}
APP_N="$(range_count "${APP_RANGE}")"

# ログ
echo "HK_RANGE=${HK_RANGE}"
echo "PRESENT=${PRESENT}"
echo "APP_RANGE=${APP_RANGE}"
echo "APP_N=${APP_N}"

# エクスポート
cat > .cpu_env <<EOF
export HK_RANGE="${HK_RANGE}"
export APP_RANGE="${APP_RANGE}"
export APP_N="${APP_N}"
EOF

echo "[OK] .cpu_env を作成しました。"
